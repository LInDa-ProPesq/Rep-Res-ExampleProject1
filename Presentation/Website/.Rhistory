URL <- "https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv"
AMC <- getURL(URL)
AMC <- read.csv(textConnection(AMC))
rstudio::viewData(AMC)
#### Create lagged crisis variable (Crisis onset year -3) ####
# Create individual year lags
AMCLag <- ddply(AMC, .(country), transform, SCL1 = c(NA, SystemicCrisis[-length(SystemicCrisis)]))
AMCLag <- ddply(AMCLag, .(country), transform, SCL2 = c(NA, SCL1[-length(SCL1)]))
?lag
# Create combined lagged variable
attach(AMCLag)
AMCLag$SystemicCrisisLag3 <- SystemicCrisis + SCL1 + SCL2
detach(AMCLag)
# Remove old lag variables
AMCLag$SCL1 <- AMCLag$SCL2 <- NULL
lg <- function(x)c(x[2:(length(x))], NA)
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = lg(ElectionYear))
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 2] <- "NoElection"
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 1] <- "Election"
#### Remove (De)centralised category
AMCLag$AMCType[AMCLag$AMCType == "(De)centralised"] <- "Decentralised"
library(crrSC)
library(cmprsk)
# devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
# devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
AMCLag$AMCStatus <- 1
AMCLag$AMCStatus[AMCLag$AMCType == "Centralised"] <-2
AMCLag$AMCStatus[AMCLag$AMCType == "Decentralised"] <-3
?crrs
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, execrlc, SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
fix(`M1`)
names(crrs)
fix(`M1`)
library(simtvc)
??simtvc
library(knitr)
Test <- print(M1, "coefficients")
Test <- print(M1, "coefficients:")
Test <- print(crrs)
Test <- print(M1)
fix(Test)
citation(simtvc)
library(simtvc)
citation("simtvc")
library(cmprsk)
library(crrSC)
devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
AMCLag$AMCStatus <- 1
AMCLag$AMCStatus[AMCLag$AMCType == "Centralised"] <-2
AMCLag$AMCStatus[AMCLag$AMCType == "Decentralised"] <-3
# Stratified competing risks model
with (AMCLag){
with (AMCLag){
with(AMCLag){
?with
with(AMCLag, {
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, execrlc, SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
})
print(M1)
with(AMCLag, {
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, execrlc, SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
print(M1)
})
)
M1 <- crrs(ftime = year,
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, execrlc, SystemicCrisisLag3),
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, execrlc, SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
fix(`M1`)
plot.cuminc
?plot.cuminc
?cuminc
cuminc
?strata
install.packages("riskRegression")
library(riskRegression)
strata(country), data = AMCLag, cause = 2)
M1 < FGR(Hist(year, AMCStatus) ~ govfrac + execrlc + SystemicCrisisLag3 + strata(country), data = AMCLag, cause = 2)
M1 < FGR(Hist(year, AMCStatus) ~ govfrac + execrlc + SystemicCrisisLag3 + strataa(country), data = AMCLag, cause = 2)
M1 < FGR(Hist(year, AMCStatus) ~ govfrac + execrlc + SystemicCrisisLag3 + strata(country), data = AMCLag, cause = 2)
M2 <- FGR(Hist(year, AMCStatus) ~ govfrac + execrlc + SystemicCrisisLag3 + strata(country), data = AMCLag, cause = 2)
M2 <- ARR(Hist(year, AMCStatus) ~ govfrac + execrlc + SystemicCrisisLag3 + strata(country), data = AMCLag, cause = 2)
print(M2)
print(M1)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, factor(execrlc), SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
print(M2)
print(M2)
print(M1)
plotEffects
plotEffects(M2)
?hist
?Surv
?crr
Test <- M1$coef
Test
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, as.factor(execrlc), SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
attach(AMCLag)
M3 <- crr(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, as.factor(execrlc), SystemicCrisisLag3),
failcode = 2,
cengroup = country)
detach(AMCLag)
summary(M3)
attach(AMCLag)
M3 <- crr(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, execrlc, SystemicCrisisLag3),
failcode = 2,
cengroup = country)
detach(AMCLag)
summary(M3)
print(M1)
?vcoc
vcoc
?vcov
vcov
UseMethod("vcov")
UseMethod("vcov")
Test <- vcov(M1)
rstudio::viewData(Test)
TestAgain <- cuminc(M1)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
Test <- cuminc(M1)
?cumin
?cuminc
attach(AMCLag)
M2 <- cuminc(ftime = year,
detach(AMCLag)
fstatus = AMCStatus,
strata = country)
detach(AMCLag)
############## Try to figure out how to similuate using normal dist. Main issue: CIF for Strata #######
detach(AMCLag)
attach(AMCLag)
M2 <- cuminc(ftime = year,
fstatus = AMCStatus,
strata = country)
print(M2)
plot(M2)
range(AMCLag$year)
attach(AMCLag)
M2 <- cuminc(ftime = (year - 1979),
detach(AMCLag)
detach(AMCLag)
attach(AMCLag)
M2 <- cuminc(ftime = (year - 1979),
fstatus = AMCStatus,
strata = country)
detach(AMCLag)
print(M2)
plot(M2)
?rmultnorm
library(MSBVAR)
?rmultnorm
library(foreign)
write.dta(AMCLag, file = "~/Desktop/AMC.dta")
print(M1)
exp(0.3417)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac),
failcode = 2,
ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
attach(AMCLag)
M1 <- crrs(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac),
failcode = 2,
ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
attach(AMCLag)
M1 <- crrs(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac),
failcode = 2,
# ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
rstudio::viewData(AMCLag)
?crrc
AMCLag$AMCStatus[AMCLag$year == 2012 & AMCLag$NumAMCCountryNoNA == 0] <- 4
range(AMCLag$AMCStatus)
summary(AMCLag$AMCStatus)
?crrc
devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
AMCLag$AMCStatus <- 1
AMCLag$AMCStatus[AMCLag$AMCType == "Centralised"] <-2
AMCLag$AMCStatus[AMCLag$AMCType == "Decentralised"] <-3
AMCLag$AMCStatus[AMCLag$year == 2012 & AMCLag$NumAMCCountryNoNA == 0] <- 4
# Stratified competing risks model
library(cmprsk)
library(crrSC)
attach(AMCLag)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac),
failcode = 2,
cencode = 1,
cluster = country)
detach(AMCLag)
print(M1)
AMCLag$AMCStatus <- NA
AMCLag$AMCStatus[AMCLag$AMCType == "Centralised"] <-2
AMCLag$AMCStatus[AMCLag$AMCType == "Decentralised"] <-3
AMCLag$AMCStatus[AMCLag$year == 2012 & AMCLag$NumAMCCountryNoNA == 0] <- 4
# Stratified competing risks model
attach(AMCLag)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac),
failcode = 2,
cencode = 1,
cluster = country)
detach(AMCLag)
print(M1)
attach(AMCLag)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cencode = 1,
cluster = country)
detach(AMCLag)
print(M1)
rstudio::viewData(AMCLag)
AMCLag$AMCStatus <- 0
AMCLag$AMCStatus[AMCLag$AMCType == "Centralised"] <-2
AMCLag$AMCStatus[AMCLag$AMCType == "Decentralised"] <-3
AMCLag$AMCStatus[AMCLag$year == 2012 & AMCLag$NumAMCCountryNoNA == 0] <- 4
# Stratified competing risks model
attach(AMCLag)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cencode = 1,
cluster = country)
detach(AMCLag)
print(M1)
attach(AMCLag)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cencode = 4,
cluster = country)
detach(AMCLag)
print(M1)
AMCLag$AMCStatus <- 1
AMCLag$AMCStatus[AMCLag$AMCType == "Centralised"] <-2
AMCLag$AMCStatus[AMCLag$AMCType == "Decentralised"] <-3
AMCLag$AMCStatus[AMCLag$year == 2012 & AMCLag$NumAMCCountryNoNA == 0] <- 4
# Stratified competing risks model
attach(AMCLag)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 3,
cencode = 4,
cluster = country)
detach(AMCLag)
print(M1)
data(cdata)
rstudio::viewData(cdata)
data(center)
rstudio::viewData(center)
duplicated(center$id)
attach(AMCLag)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3, UDS),
failcode = 3,
cencode = 4,
cluster = country)
detach(AMCLag)
print(M1)
?crr
rstudio::viewData(AMCLag)
attach(AMCLag)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac),
failcode = 3,
cencode = 4,
cluster = country)
detach(AMCLag)
print(M1)
?Hist
data(Melenoma)
library(riskRegression)
data(Melenoma)
data(Melanoma)
rstudio::viewData(Melanoma)
rstudio::viewData(AMCLag)
AMCShort <- subset(AMCLag, AMCAnyCreated == 1)
rstudio::viewData(AMCShort)
AMCShort2 <- subset(AMCLag, AMCStatus == 4)
rstudio::viewData(AMCShort2)
AMCShort1 <- subset(AMCLag, AMCAnyCreated == 1)
AMCShort <- rbind(AMCShort1, AMCShort2)
attach(AMCShort)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac),
failcode = 2,
cencode = 4,
cluster = country)
detach(AMCShort)
print(M1)
attach(AMCShort)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac),
failcode = 3,
cencode = 4,
cluster = country)
detach(AMCShort)
print(M1)
attach(AMCShort)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3, UDS),
failcode = 3,
cencode = 4,
cluster = country)
detach(AMCShort)
print(M1)
?install.packages
library(simPH)
?simcoxtvc
?coxsimtvc
?coxsimlinear
?coxsimLinear
library(reshape2)
library(survival)
library(foreign)
library(simPH)
mydata <- read.dta ("~/Desktop/JeffWinter2012_13/Data2.dta")
group2 <- subset(mydata, group2==1)
M1 <-  coxph(Surv(begin, end, Partisan_Spell) ~ BEGINbc*POLCONIII + cumulative_crisis + polity2 + Growth + strata(new_count_ps) + cluster(imfcode), robust = TRUE, na.action=na.exclude, data=group2, control=coxph.control(eps=1e-09, iter.max=100, outer.max=100))
summary(M1)
summary(POLCONIII)
summary(group2$POLCONIII)
simM1 <- coxsimInteract(obj=M1, b="BEGINbc", b2="POLCONIII", X1 = 1, X2=seq(0, 0.7, by=.1), qi = "Hazard Rate" )
?coxsimInteract
simM1 <- coxsimInteract(obj=M1, b1 = "BEGINbc", b2 = "POLCONIII", X1 = 1, X2=seq(0, 0.7, by=.1), qi = "Hazard Rate" )
library(survival)
library(foreign)
library(simPH)
mydata <- read.dta ("~/Desktop/JeffWinter2012_13/Data2.dta")
group2 <- subset(mydata, group2==1)
M1 <-  coxph(Surv(begin, end, Partisan_Spell) ~ BEGINbc*POLCONIII + cumulative_crisis + polity2 + Growth + strata(new_count_ps) + cluster(imfcode), robust = TRUE, na.action=na.exclude, data=group2, control=coxph.control(eps=1e-09, iter.max=100, outer.max=100))
Numbers <- basehaz(M1)
rstudio::viewData(Numbers)
simM1 <- coxsimInteract(obj=M1, b1 = "BEGINbc", b2 = "POLCONIII", X1 = 1, X2=seq(0, 0.7, by=.1), qi = "Hazard Ratio" )
gginteract(simM1)
gginteract(simM1, qi = "Hazard Ratio", smoother = "lm", xlab = "\nPOLCONIII")
Test <- simM1$X2
fix(Test)
simM1 <- coxsimInteract(obj=M1, b1 = "POLCONIII", b2 = "BEGINbc", X1 = seq(0, 0.7, by=.1), X2 = 1, qi = "Hazard Ratio" )
M1 <-  coxph(Surv(begin, end, Partisan_Spell) ~ POLCONIII*BEGINbc + cumulative_crisis + polity2 + Growth + strata(new_count_ps) + cluster(imfcode), robust = TRUE, na.action=na.exclude, data=group2, control=coxph.control(eps=1e-09, iter.max=100, outer.max=100))
simM1 <- coxsimInteract(obj=M1, b1 = "POLCONIII", b2 = "BEGINbc", X1 = seq(0, 0.7, by=.1), X2 = 1, qi = "Hazard Ratio" )
gginteract(simM1, qi = "Hazard Ratio", smoother = "lm", xlab = "\nPOLCONIII")
simM1 <- coxsimInteract(obj=M1, b1 = "POLCONIII", b2 = "BEGINbc", X1 = seq(0, 0.7, by=.1), X2 = 1, qi = "Marginal Effect" )
?coxsimInteract
################
# Download Agricultural methane emissions (% of total) from WDI
# Christopher Gandrud
# Updated 7 January 2013
# For more information see: http://data.worldbank.org/indicator
################
# Load WDI
library(WDI)
library(plyr)
# Note: Fertilizer consumption/hectare of arable land indicator number:
# AG.CON.FERT.ZS
# Note: for simplicity that this example does not include
# all of the clean up  procedures covered in Chapter 7 of "Reproducible Research"
# Gather agricultural methane emissions data from WDI
FertConsumpData <- WDI(indicator = "AG.CON.FERT.ZS")
# Rename variable = year, value = FertilizerConsumption
FertConsumpData <- plyr::rename(x = FertConsumpData,
replace = c(AG.CON.FERT.ZS
= "FertilizerConsumption"))
#############
# Download and clean Pemstein (2010) Unified Democracy Score Data
# Christopher Gandrud
# Updated 17 February 2013
# Data downloaded from http://www.unified-democracy-scores.org/
#############
# Load library
library(countrycode)
library(plyr)
#### # For simplicity, store the shortened URL in an object called url.
url <- "http://bit.ly/S0vxk2"
# Create a temporary file called 'temp' to put the zip file into.
temp <- tempfile()
# Create a temporary file called 'temp' to put the zip file into. temp <- tempfile()
# Download the compressed file into the temporary file.
download.file(url, temp)
# Decompress the file and convert it into a dataframe class object called data.
UDSData <- read.csv(gzfile(temp, "uds_summary.csv"))
# Delete the temporary file.
unlink(temp)
# Created standardized country ID numbers based on iso 2 character codes
UDSData$iso2c <- countrycode(UDSData$country,
origin = "country.name",
destination = "iso2c")
# Keep only country, year, iso2c, and mean (UDS) variables
UDSData <- UDSData[, c("iso2c", "year", "mean")]
# Rename mean -> UDS
UDSData <- plyr::rename(UDSData, c("mean" = "UDS"))
MergedData <- merge(
MergedData, UDSData,
union("iso2c", "year"),
all = FALSE)
library(gdata)
library(reshape)
library(xtable)
library(knitr)
MergedData <- merge(FertConsumpData, UDSData,
union("iso2c", "year"),
all = FALSE)
# Created a data frame of duplicated country-years
DataNotDuplicates <- MergedData[!duplicated(
MergedData[, 1:2]), ]
rstudio::viewData(DataNotDuplicates)
rstudio::viewData(DataNotDuplicates)
?toHTML
system("cd /Rep-Res-ExampleProject1/Data"; "make")
system("cd /Rep-Res-ExampleProject1/Data; make")
system("cd /Rep-Res-ExampleProject1/Data; make")
knit2pdf("/Rep-Res-ExampleProject1/Presentation/Article/Article.Rnw")
knit2pdf("/Rep-Res-ExampleProject1/Presentation/Article/Article.Rnw")
knit2pdf("/Rep-Res-ExampleProject1/Presentation/Article/Article.Rnw")
setwd("/Rep-Res-ExampleProject1/Presentation/Article/")
knit2pdf("Article.Rnw")
setwd("/Rep-Res-ExampleProject1/Presentation/Article/")
knit2pdf("Article.Rnw")
knit2pdf("/Rep-Res-ExampleProject1/Presentation/Slideshow/Slideshow.Rnw")
knit2pdf("/Rep-Res-ExampleProject1/Presentation/Website/Website.Rmd")
knit2html("/Rep-Res-ExampleProject1/Presentation/Website/Website.Rmd")
setwd("/Rep-Res-ExampleProject1/Presentation/Article/")
knit2pdf("Article.Rnw")
setwd("/Rep-Res-ExampleProject1/Presentation/Article/")
knit2pdf(input = "Article.Rnw")
setwd("/Rep-Res-ExampleProject1/Presentation/Slideshow/")
knit2pdf("Slideshow.Rnw")
setwd("/Rep-Res-ExampleProject1/Presentation/Website/")
knit2html("Website.Rmd")
